// Generated by view binder compiler. Do not edit!
package com.kovetstech.candlestickpatterns.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.fragment.app.FragmentContainerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kovetstech.candlestickpatterns.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSimulatorSettingsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FragmentContainerView backgroundColorpicker;

  @NonNull
  public final ConstraintLayout frameLayout5;

  @NonNull
  public final FragmentContainerView negCandleColorpicker;

  @NonNull
  public final FragmentContainerView posCandleColorpicker;

  @NonNull
  public final TextView settingsTitle2;

  @NonNull
  public final FragmentContainerView shadowColorpicker;

  private FragmentSimulatorSettingsBinding(@NonNull ConstraintLayout rootView,
      @NonNull FragmentContainerView backgroundColorpicker, @NonNull ConstraintLayout frameLayout5,
      @NonNull FragmentContainerView negCandleColorpicker,
      @NonNull FragmentContainerView posCandleColorpicker, @NonNull TextView settingsTitle2,
      @NonNull FragmentContainerView shadowColorpicker) {
    this.rootView = rootView;
    this.backgroundColorpicker = backgroundColorpicker;
    this.frameLayout5 = frameLayout5;
    this.negCandleColorpicker = negCandleColorpicker;
    this.posCandleColorpicker = posCandleColorpicker;
    this.settingsTitle2 = settingsTitle2;
    this.shadowColorpicker = shadowColorpicker;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSimulatorSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSimulatorSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_simulator_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSimulatorSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.background_colorpicker;
      FragmentContainerView backgroundColorpicker = ViewBindings.findChildViewById(rootView, id);
      if (backgroundColorpicker == null) {
        break missingId;
      }

      ConstraintLayout frameLayout5 = (ConstraintLayout) rootView;

      id = R.id.neg_candle_colorpicker;
      FragmentContainerView negCandleColorpicker = ViewBindings.findChildViewById(rootView, id);
      if (negCandleColorpicker == null) {
        break missingId;
      }

      id = R.id.pos_candle_colorpicker;
      FragmentContainerView posCandleColorpicker = ViewBindings.findChildViewById(rootView, id);
      if (posCandleColorpicker == null) {
        break missingId;
      }

      id = R.id.settings_title2;
      TextView settingsTitle2 = ViewBindings.findChildViewById(rootView, id);
      if (settingsTitle2 == null) {
        break missingId;
      }

      id = R.id.shadow_colorpicker;
      FragmentContainerView shadowColorpicker = ViewBindings.findChildViewById(rootView, id);
      if (shadowColorpicker == null) {
        break missingId;
      }

      return new FragmentSimulatorSettingsBinding((ConstraintLayout) rootView,
          backgroundColorpicker, frameLayout5, negCandleColorpicker, posCandleColorpicker,
          settingsTitle2, shadowColorpicker);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
