// Generated by view binder compiler. Do not edit!
package com.kovetstech.candlestickpatterns.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kovetstech.candlestickpatterns.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSimulatorSettingsColorPickerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView colorpickerCircle;

  @NonNull
  public final TextView colorpickerTitle;

  @NonNull
  public final ConstraintLayout frameLayout6;

  private FragmentSimulatorSettingsColorPickerBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView colorpickerCircle, @NonNull TextView colorpickerTitle,
      @NonNull ConstraintLayout frameLayout6) {
    this.rootView = rootView;
    this.colorpickerCircle = colorpickerCircle;
    this.colorpickerTitle = colorpickerTitle;
    this.frameLayout6 = frameLayout6;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSimulatorSettingsColorPickerBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSimulatorSettingsColorPickerBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_simulator_settings_color_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSimulatorSettingsColorPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.colorpicker_circle;
      ImageView colorpickerCircle = ViewBindings.findChildViewById(rootView, id);
      if (colorpickerCircle == null) {
        break missingId;
      }

      id = R.id.colorpicker_title;
      TextView colorpickerTitle = ViewBindings.findChildViewById(rootView, id);
      if (colorpickerTitle == null) {
        break missingId;
      }

      ConstraintLayout frameLayout6 = (ConstraintLayout) rootView;

      return new FragmentSimulatorSettingsColorPickerBinding((ConstraintLayout) rootView,
          colorpickerCircle, colorpickerTitle, frameLayout6);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
