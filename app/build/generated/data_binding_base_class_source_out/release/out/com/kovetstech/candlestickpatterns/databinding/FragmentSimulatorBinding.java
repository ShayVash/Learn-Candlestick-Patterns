// Generated by view binder compiler. Do not edit!
package com.kovetstech.candlestickpatterns.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.mikephil.charting.charts.CandleStickChart;
import com.kovetstech.candlestickpatterns.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSimulatorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CandleStickChart candleStickChart;

  @NonNull
  public final Button downButton;

  @NonNull
  public final ConstraintLayout frameLayout;

  @NonNull
  public final View horSep;

  @NonNull
  public final Button nextButton;

  @NonNull
  public final TextView simulatorTitle;

  @NonNull
  public final Spinner spinner;

  @NonNull
  public final Button upButton;

  @NonNull
  public final View varSep;

  private FragmentSimulatorBinding(@NonNull ConstraintLayout rootView,
      @NonNull CandleStickChart candleStickChart, @NonNull Button downButton,
      @NonNull ConstraintLayout frameLayout, @NonNull View horSep, @NonNull Button nextButton,
      @NonNull TextView simulatorTitle, @NonNull Spinner spinner, @NonNull Button upButton,
      @NonNull View varSep) {
    this.rootView = rootView;
    this.candleStickChart = candleStickChart;
    this.downButton = downButton;
    this.frameLayout = frameLayout;
    this.horSep = horSep;
    this.nextButton = nextButton;
    this.simulatorTitle = simulatorTitle;
    this.spinner = spinner;
    this.upButton = upButton;
    this.varSep = varSep;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSimulatorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSimulatorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_simulator, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSimulatorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.candle_stick_chart;
      CandleStickChart candleStickChart = ViewBindings.findChildViewById(rootView, id);
      if (candleStickChart == null) {
        break missingId;
      }

      id = R.id.down_button;
      Button downButton = ViewBindings.findChildViewById(rootView, id);
      if (downButton == null) {
        break missingId;
      }

      ConstraintLayout frameLayout = (ConstraintLayout) rootView;

      id = R.id.hor_sep;
      View horSep = ViewBindings.findChildViewById(rootView, id);
      if (horSep == null) {
        break missingId;
      }

      id = R.id.next_button;
      Button nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.simulator_title;
      TextView simulatorTitle = ViewBindings.findChildViewById(rootView, id);
      if (simulatorTitle == null) {
        break missingId;
      }

      id = R.id.spinner;
      Spinner spinner = ViewBindings.findChildViewById(rootView, id);
      if (spinner == null) {
        break missingId;
      }

      id = R.id.up_button;
      Button upButton = ViewBindings.findChildViewById(rootView, id);
      if (upButton == null) {
        break missingId;
      }

      id = R.id.var_sep;
      View varSep = ViewBindings.findChildViewById(rootView, id);
      if (varSep == null) {
        break missingId;
      }

      return new FragmentSimulatorBinding((ConstraintLayout) rootView, candleStickChart, downButton,
          frameLayout, horSep, nextButton, simulatorTitle, spinner, upButton, varSep);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
